;;;; srfi-64.import.scm - GENERATED BY CHICKEN 5.4.0 -*- Scheme -*-

(##sys#with-environment
  (lambda ()
    (scheme#eval
      '(import-syntax
         (only r7rs
               begin
               cond-expand
               export
               import
               import-for-syntax
               include
               include-ci
               syntax-rules)
         scheme.base
         scheme.char
         scheme.eval
         scheme.file
         scheme.read
         scheme.write
         scheme.process-context
         srfi-1
         srfi-8
         srfi-26
         srfi-28))
    (import
      (only r7rs
            begin
            cond-expand
            export
            import
            import-for-syntax
            include
            include-ci
            syntax-rules))
    (##sys#register-compiled-module
      'srfi-64
      'srfi-64
      (scheme#list
        '(should-run? . srfi-64#should-run?)
        '(within-epsilon . srfi-64#within-epsilon)
        '(increment-test-count . srfi-64#increment-test-count)
        '(fail-on-exception . srfi-64#fail-on-exception)
        '(final-result-kind! . srfi-64#final-result-kind!)
        '(preliminary-result-kind! . srfi-64#preliminary-result-kind!)
        '(%cmp-group-name . srfi-64#%cmp-group-name)
        '(increment-executed-count . srfi-64#increment-executed-count)
        '(group-previous-skip-list . srfi-64#group-previous-skip-list)
        '(group-installed-runner? . srfi-64#group-installed-runner?)
        '(group-executed-count! . srfi-64#group-executed-count!)
        '(group-executed-count . srfi-64#group-executed-count)
        '(group-count . srfi-64#group-count)
        '(group-name . srfi-64#group-name)
        '(group? . srfi-64#group?)
        '(make-group . srfi-64#make-group)
        '(<group> . srfi-64#<group>)
        '(test-on-test-begin-simple . srfi-64#test-on-test-begin-simple)
        '(should-fail? . srfi-64#should-fail?)
        '(should-skip? . srfi-64#should-skip?)
        '(any-specifier-matches? . srfi-64#any-specifier-matches?)
        '(obj->specifier . srfi-64#obj->specifier)
        '(test-runner-skip-list! . srfi-64#test-runner-skip-list!)
        '(test-runner-skip-list . srfi-64#test-runner-skip-list)
        '(test-runner-run-list! . srfi-64#test-runner-run-list!)
        '(test-runner-run-list . srfi-64#test-runner-run-list)
        '(test-runner-groups! . srfi-64#test-runner-groups!)
        '(test-runner-groups . srfi-64#test-runner-groups)
        '(test-runner-fail-list! . srfi-64#test-runner-fail-list!)
        '(test-runner-fail-list . srfi-64#test-runner-fail-list)
        '(test-runner-group-stack! . srfi-64#test-runner-group-stack!)
        '(test-runner-test-name! . srfi-64#test-runner-test-name!)
        '(test-runner-counts! . srfi-64#test-runner-counts!)
        '(test-runner-counts . srfi-64#test-runner-counts)
        '(test-runner-result-alist! . srfi-64#test-runner-result-alist!)
        '(test-runner-result-alist . srfi-64#test-runner-result-alist)
        '(%make-test-runner . srfi-64#%make-test-runner)
        '(<test-runner> . srfi-64#<test-runner>)
        '(pretty-print . srfi-64#pretty-print)
        '(string-trim-both . srfi-64#string-trim-both))
      '((test-read-eval-string . srfi-64#test-read-eval-string)
        (test-begin . srfi-64#test-begin)
        (test-end . srfi-64#test-end)
        (test-match-name . srfi-64#test-match-name)
        (test-match-nth . srfi-64#test-match-nth)
        (test-match-any . srfi-64#test-match-any)
        (test-match-all . srfi-64#test-match-all)
        (test-skip . srfi-64#test-skip)
        (test-expect-fail . srfi-64#test-expect-fail)
        (test-runner? . srfi-64#test-runner?)
        (test-runner-current . srfi-64#test-runner-current)
        (test-runner-get . srfi-64#test-runner-get)
        (test-runner-simple . srfi-64#test-runner-simple)
        (test-runner-null . srfi-64#test-runner-null)
        (test-runner-create . srfi-64#test-runner-create)
        (test-runner-factory . srfi-64#test-runner-factory)
        (test-apply . srfi-64#test-apply)
        (test-result-kind . srfi-64#test-result-kind)
        (test-passed? . srfi-64#test-passed?)
        (test-result-ref . srfi-64#test-result-ref)
        (test-result-set! . srfi-64#test-result-set!)
        (test-result-remove . srfi-64#test-result-remove)
        (test-result-clear . srfi-64#test-result-clear)
        (test-result-alist . srfi-64#test-result-alist)
        (test-runner-on-test-begin . srfi-64#test-runner-on-test-begin)
        (test-runner-on-test-begin! . srfi-64#test-runner-on-test-begin!)
        (test-runner-on-test-end . srfi-64#test-runner-on-test-end)
        (test-runner-on-test-end! . srfi-64#test-runner-on-test-end!)
        (test-runner-on-group-begin . srfi-64#test-runner-on-group-begin)
        (test-runner-on-group-begin! . srfi-64#test-runner-on-group-begin!)
        (test-runner-on-group-end . srfi-64#test-runner-on-group-end)
        (test-runner-on-group-end! . srfi-64#test-runner-on-group-end!)
        (test-runner-on-bad-count . srfi-64#test-runner-on-bad-count)
        (test-runner-on-bad-count! . srfi-64#test-runner-on-bad-count!)
        (test-runner-on-bad-end-name . srfi-64#test-runner-on-bad-end-name)
        (test-runner-on-bad-end-name! . srfi-64#test-runner-on-bad-end-name!)
        (test-runner-on-final . srfi-64#test-runner-on-final)
        (test-runner-on-final! . srfi-64#test-runner-on-final!)
        (test-on-test-end-simple . srfi-64#test-on-test-end-simple)
        (test-on-group-begin-simple . srfi-64#test-on-group-begin-simple)
        (test-on-group-end-simple . srfi-64#test-on-group-end-simple)
        (test-on-bad-count-simple . srfi-64#test-on-bad-count-simple)
        (test-on-bad-end-name-simple . srfi-64#test-on-bad-end-name-simple)
        (test-runner-pass-count . srfi-64#test-runner-pass-count)
        (test-runner-fail-count . srfi-64#test-runner-fail-count)
        (test-runner-xpass-count . srfi-64#test-runner-xpass-count)
        (test-runner-xfail-count . srfi-64#test-runner-xfail-count)
        (test-runner-skip-count . srfi-64#test-runner-skip-count)
        (test-runner-test-name . srfi-64#test-runner-test-name)
        (test-runner-group-path . srfi-64#test-runner-group-path)
        (test-runner-group-stack . srfi-64#test-runner-group-stack)
        (test-runner-aux-value . srfi-64#test-runner-aux-value)
        (test-runner-aux-value! . srfi-64#test-runner-aux-value!)
        (test-runner-reset . srfi-64#test-runner-reset)
        (test-on-final-simple . srfi-64#test-on-final-simple))
      (scheme#list
        (scheme#cons
          'test-with-runner
          (syntax-rules
            ()
            ((_ runner decl-or-expr ...)
             (parameterize
               ((test-runner-current runner))
               #t
               decl-or-expr
               ...))))
        (scheme#cons
          'test-error
          (syntax-rules
            ()
            ((_ test-name error-type test-expr)
             (%test-error test-name error-type test-expr))
            ((_ error-type test-expr) (%test-error #f error-type test-expr))
            ((_ test-expr) (%test-error #f #t test-expr))))
        (scheme#cons
          'test-approximate
          (syntax-rules
            ()
            ((_ test-name expected test-expr error)
             (%test-approximate test-name expected test-expr error))
            ((_ expected test-expr error)
             (%test-approximate #f expected test-expr error))))
        (scheme#cons
          'test-equal
          (syntax-rules
            ()
            ((_ test-name expected equal?)
             (%%test-2 test-proc test-name expected equal?))
            ((_ expected test-expr) (%%test-2 test-proc #f expected equal?))))
        (scheme#cons
          'test-eqv
          (syntax-rules
            ()
            ((_ test-name expected eqv?)
             (%%test-2 test-proc test-name expected eqv?))
            ((_ expected test-expr) (%%test-2 test-proc #f expected eqv?))))
        (scheme#cons
          'test-eq
          (syntax-rules
            ()
            ((_ test-name expected eq?)
             (%%test-2 test-proc test-name expected eq?))
            ((_ expected test-expr) (%%test-2 test-proc #f expected eq?))))
        (scheme#cons
          'test-assert
          (syntax-rules
            ()
            ((_ test-name expression) (%test-assert test-name expression))
            ((_ expression) (%test-assert #f expression))))
        (scheme#cons
          'test-group-with-cleanup
          (syntax-rules
            ()
            ((_ suite-name decl-or-expr ... cleanup-form)
             (dynamic-wind
               (lambda () #t)
               (lambda () (test-group suite-name decl-or-expr ...))
               (lambda () cleanup-form)))))
        (scheme#cons
          'test-group
          (syntax-rules
            ()
            ((_ suite-name decl-or-expr ...)
             (let ((r (test-runner-current)) (name suite-name))
               (when (or (not r)
                         (begin
                           (test-runner-test-name! r name)
                           (not (should-skip?))))
                     (dynamic-wind
                       (lambda () (test-begin name))
                       (lambda () decl-or-expr ...)
                       (lambda () (test-end name))))))))
        (scheme#cons
          '|\x04r7rssrfi-64|
          (##sys#er-transformer (##core#lambda (x r c) (##core#undefined)))))
      (scheme#list
        (scheme#cons
          '%test-error
          (syntax-rules
            ()
            ((_ test-name error-type test-expr)
             (test-thunk
               (let () test-name)
               (lambda ()
                 (let ((r (test-runner-current)) (e-type (let () error-type)))
                   (test-result-set! r 'expected-error e-type)
                   (with-exception-handler
                     (lambda (exc)
                       (test-result-set! r 'actual-error exc)
                       (cond ((symbol? e-type) #f)
                             ((procedure? e-type) (e-type exc))))
                     (lambda () test-expr (not e-type)))))))))
        (scheme#cons
          '%test-approximate
          (syntax-rules
            ()
            ((_ test-name expected test-expr error)
             (test-thunk
               (let () test-name)
               (lambda ()
                 (let ((r (test-runner-current))
                       (e (let () expected))
                       (a (let () test-expr))
                       (eps (let () error)))
                   (test-result-set! r 'expected-value e)
                   (test-result-set! r 'actual-value a)
                   (test-result-set! r 'epsilon eps)
                   ((within-epsilon eps) e a)))))))
        (scheme#cons
          '%%test-2
          (syntax-rules
            ()
            ((_ test-proc test-name expected test-expr)
             (test-thunk
               (let () test-name)
               (lambda ()
                 (let ((r (test-runner-current))
                       (e (let () expected))
                       (a (let () test-expr)))
                   (test-result-set! r 'expected-value e)
                   (test-result-set! r 'actual-value a)
                   (test-proc e a)))))))
        (scheme#cons
          '%test-assert
          (syntax-rules
            ()
            ((_ test-name expression)
             (test-thunk
               (let () test-name)
               (lambda ()
                 (let ((r (test-runner-current)) (a (let () expression)))
                   (test-result-set! r 'actual-value a)
                   a))))))
        (scheme#cons
          'test-thunk
          (syntax-rules
            ()
            ((test-thunk test-name thunk)
             (let ((r (test-runner-current)))
               (test-runner-test-name! r (or test-name ""))
               (let ((fail? (should-fail?))
                     (run? (should-run?))
                     (skip? (should-skip?)))
                 (preliminary-result-kind! r fail? skip?)
                 ((test-runner-on-test-begin r) r)
                 (when run?
                       (if skip?
                         (test-result-set! r 'result-kind 'skip)
                         (begin
                           (final-result-kind!
                             r
                             (fail-on-exception thunk)
                             fail?)
                           (increment-executed-count r))))
                 ((test-runner-on-test-end r) r)
                 (increment-test-count r))))))
        (scheme#cons
          'with-output-to-string
          (syntax-rules
            ()
            ((_ thunk)
             (parameterize
               ((current-output-port (open-output-string)))
               thunk
               (get-output-string (current-output-port))))))
        (scheme#cons
          'assq-set!
          (syntax-rules
            ()
            ((_ alist key value)
             (let ((result (list)) (found? #f))
               (for-each
                 (lambda (item)
                   (if (eq? (car item) key)
                     (begin
                       (set! found? #t)
                       (set! result (cons (cons key value) result)))
                     (set! result (cons item result))))
                 alist)
               (when (not found?) (set! result (cons (cons key value) result)))
               result))))
        (scheme#cons
          'assq-ref
          (syntax-rules
            ()
            ((_ alist key) (if (assq key alist) (cdr (assq key alist)) #f))))
        (scheme#cons
          'assoc-remove!
          (syntax-rules
            ()
            ((_ alist key)
             (let ((result (list)))
               (for-each
                 (lambda (item)
                   (when (not (equal? (car item) key))
                         (set! result (cons item result))))
                 alist)
               result))))
        (scheme#cons
          'assoc-set!
          (syntax-rules
            ()
            ((_ alist key value)
             (let ((result (list)) (found? #f))
               (for-each
                 (lambda (item)
                   (if (equal? (car item) key)
                     (begin
                       (set! found? #t)
                       (set! result (cons (cons key value) result)))
                     (set! result (cons item result))))
                 alist)
               (when (not found?) (set! result (cons (cons key value) result)))
               result))))
        (scheme#cons
          'assoc-ref
          (syntax-rules
            ()
            ((_ alist key)
             (if (assoc key alist) (cdr (assoc key alist)) #f)))))
      (scheme#list))))

;; END OF FILE
