        stage("SRFI-{{number}} - {{name}}") {
            agent {
                docker {
                    image 'schemers/{{name}}'
                    reuseNode true
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh 'find . -maxdepth 1 -name "*.log" -delete'

                    // If the implementation is compiler other than chicken then compile the SRFI library
                    sh 'if [ ! "{{library-command}}" = "" ] && [ ! "{{name}}" = "chicken"] ; then {{library-command}} srfi/{{number}}.sld ; fi'

                    // Chicken needs the file to be in same folder and with different name
                    sh 'if ["{{name}}" = "chicken"] ; then cp srfi/64.sld srfi-64.sld && {{library-command}} srfi-64.sld ; fi'

                    sh '{{command}} srfi-test/{{number}}.scm'

                    // If the implementation makes executable then run it
                    sh 'if [ ! "{{library-command}}" = "" ]; then ./srfi-test/{{number}} ; fi'

                    // Change any logfiles to identify implementatio nand SRFI and stash them
                    unstash 'reports'
                    sh 'for f in *.log; do cp -- "$f" "reports/SRFI-{{number}}-{{name}}.log"; done'
                    sh 'ls reports'
                    archiveArtifacts artifacts: 'reports/*.log'

                    // Clean up possible executables
                    sh 'rm -rf srfi-test/{{number}}'


                    // Check if all tests passed, dont put anything after this on fail it wont be run
                    sh 'test $(grep result-kind: *.log | grep fail | grep -v xfail -c) -eq 0 || exit 1'
                }
            }
        }
